# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from offboard_control/GenTrajOnlineRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GenTrajOnlineRequest(genpy.Message):
  _md5sum = "c7be0038aa37973ee7d8786bd8a24adf"
  _type = "offboard_control/GenTrajOnlineRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped targPoint
geometry_msgs/PoseStamped pose
geometry_msgs/TwistStamped twist
bool isUpdateState

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['targPoint','pose','twist','isUpdateState']
  _slot_types = ['geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','geometry_msgs/TwistStamped','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       targPoint,pose,twist,isUpdateState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenTrajOnlineRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.targPoint is None:
        self.targPoint = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      if self.isUpdateState is None:
        self.isUpdateState = False
    else:
      self.targPoint = geometry_msgs.msg.PoseStamped()
      self.pose = geometry_msgs.msg.PoseStamped()
      self.twist = geometry_msgs.msg.TwistStamped()
      self.isUpdateState = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.targPoint.header.seq, _x.targPoint.header.stamp.secs, _x.targPoint.header.stamp.nsecs))
      _x = self.targPoint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.targPoint.pose.position.x, _x.targPoint.pose.position.y, _x.targPoint.pose.position.z, _x.targPoint.pose.orientation.x, _x.targPoint.pose.orientation.y, _x.targPoint.pose.orientation.z, _x.targPoint.pose.orientation.w, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs))
      _x = self.twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6dB().pack(_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.isUpdateState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.targPoint is None:
        self.targPoint = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.targPoint.header.seq, _x.targPoint.header.stamp.secs, _x.targPoint.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targPoint.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targPoint.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.targPoint.pose.position.x, _x.targPoint.pose.position.y, _x.targPoint.pose.position.z, _x.targPoint.pose.orientation.x, _x.targPoint.pose.orientation.y, _x.targPoint.pose.orientation.z, _x.targPoint.pose.orientation.w, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.twist.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.isUpdateState,) = _get_struct_6dB().unpack(str[start:end])
      self.isUpdateState = bool(self.isUpdateState)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.targPoint.header.seq, _x.targPoint.header.stamp.secs, _x.targPoint.header.stamp.nsecs))
      _x = self.targPoint.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.targPoint.pose.position.x, _x.targPoint.pose.position.y, _x.targPoint.pose.position.z, _x.targPoint.pose.orientation.x, _x.targPoint.pose.orientation.y, _x.targPoint.pose.orientation.z, _x.targPoint.pose.orientation.w, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs))
      _x = self.pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs))
      _x = self.twist.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6dB().pack(_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.isUpdateState))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.targPoint is None:
        self.targPoint = geometry_msgs.msg.PoseStamped()
      if self.pose is None:
        self.pose = geometry_msgs.msg.PoseStamped()
      if self.twist is None:
        self.twist = geometry_msgs.msg.TwistStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.targPoint.header.seq, _x.targPoint.header.stamp.secs, _x.targPoint.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.targPoint.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.targPoint.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.targPoint.pose.position.x, _x.targPoint.pose.position.y, _x.targPoint.pose.position.z, _x.targPoint.pose.orientation.x, _x.targPoint.pose.orientation.y, _x.targPoint.pose.orientation.z, _x.targPoint.pose.orientation.w, _x.pose.header.seq, _x.pose.header.stamp.secs, _x.pose.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.pose.position.x, _x.pose.pose.position.y, _x.pose.pose.position.z, _x.pose.pose.orientation.x, _x.pose.pose.orientation.y, _x.pose.pose.orientation.z, _x.pose.pose.orientation.w, _x.twist.header.seq, _x.twist.header.stamp.secs, _x.twist.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.twist.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.twist.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.twist.twist.linear.x, _x.twist.twist.linear.y, _x.twist.twist.linear.z, _x.twist.twist.angular.x, _x.twist.twist.angular.y, _x.twist.twist.angular.z, _x.isUpdateState,) = _get_struct_6dB().unpack(str[start:end])
      self.isUpdateState = bool(self.isUpdateState)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6dB = None
def _get_struct_6dB():
    global _struct_6dB
    if _struct_6dB is None:
        _struct_6dB = struct.Struct("<6dB")
    return _struct_6dB
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from offboard_control/GenTrajOnlineResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mavros_msgs.msg
import std_msgs.msg

class GenTrajOnlineResponse(genpy.Message):
  _md5sum = "fc09c2e807f0520d98276cab75c5deb6"
  _type = "offboard_control/GenTrajOnlineResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """mavros_msgs/PositionTarget setPointRaw
bool success

================================================================================
MSG: mavros_msgs/PositionTarget
# Message for SET_POSITION_TARGET_LOCAL_NED
#
# Some complex system requires all feautures that mavlink
# message provide. See issue #402.

std_msgs/Header header

uint8 coordinate_frame
uint8 FRAME_LOCAL_NED = 1
uint8 FRAME_LOCAL_OFFSET_NED = 7
uint8 FRAME_BODY_NED = 8
uint8 FRAME_BODY_OFFSET_NED = 9

uint16 type_mask
uint16 IGNORE_PX = 1	# Position ignore flags
uint16 IGNORE_PY = 2
uint16 IGNORE_PZ = 4
uint16 IGNORE_VX = 8	# Velocity vector ignore flags
uint16 IGNORE_VY = 16
uint16 IGNORE_VZ = 32
uint16 IGNORE_AFX = 64	# Acceleration/Force vector ignore flags
uint16 IGNORE_AFY = 128
uint16 IGNORE_AFZ = 256
uint16 FORCE = 512	# Force in af vector flag
uint16 IGNORE_YAW = 1024
uint16 IGNORE_YAW_RATE = 2048

geometry_msgs/Point position
geometry_msgs/Vector3 velocity
geometry_msgs/Vector3 acceleration_or_force
float32 yaw
float32 yaw_rate

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['setPointRaw','success']
  _slot_types = ['mavros_msgs/PositionTarget','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setPointRaw,success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GenTrajOnlineResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.setPointRaw is None:
        self.setPointRaw = mavros_msgs.msg.PositionTarget()
      if self.success is None:
        self.success = False
    else:
      self.setPointRaw = mavros_msgs.msg.PositionTarget()
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.setPointRaw.header.seq, _x.setPointRaw.header.stamp.secs, _x.setPointRaw.header.stamp.nsecs))
      _x = self.setPointRaw.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH9d2fB().pack(_x.setPointRaw.coordinate_frame, _x.setPointRaw.type_mask, _x.setPointRaw.position.x, _x.setPointRaw.position.y, _x.setPointRaw.position.z, _x.setPointRaw.velocity.x, _x.setPointRaw.velocity.y, _x.setPointRaw.velocity.z, _x.setPointRaw.acceleration_or_force.x, _x.setPointRaw.acceleration_or_force.y, _x.setPointRaw.acceleration_or_force.z, _x.setPointRaw.yaw, _x.setPointRaw.yaw_rate, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.setPointRaw is None:
        self.setPointRaw = mavros_msgs.msg.PositionTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.setPointRaw.header.seq, _x.setPointRaw.header.stamp.secs, _x.setPointRaw.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.setPointRaw.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.setPointRaw.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.setPointRaw.coordinate_frame, _x.setPointRaw.type_mask, _x.setPointRaw.position.x, _x.setPointRaw.position.y, _x.setPointRaw.position.z, _x.setPointRaw.velocity.x, _x.setPointRaw.velocity.y, _x.setPointRaw.velocity.z, _x.setPointRaw.acceleration_or_force.x, _x.setPointRaw.acceleration_or_force.y, _x.setPointRaw.acceleration_or_force.z, _x.setPointRaw.yaw, _x.setPointRaw.yaw_rate, _x.success,) = _get_struct_BH9d2fB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.setPointRaw.header.seq, _x.setPointRaw.header.stamp.secs, _x.setPointRaw.header.stamp.nsecs))
      _x = self.setPointRaw.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH9d2fB().pack(_x.setPointRaw.coordinate_frame, _x.setPointRaw.type_mask, _x.setPointRaw.position.x, _x.setPointRaw.position.y, _x.setPointRaw.position.z, _x.setPointRaw.velocity.x, _x.setPointRaw.velocity.y, _x.setPointRaw.velocity.z, _x.setPointRaw.acceleration_or_force.x, _x.setPointRaw.acceleration_or_force.y, _x.setPointRaw.acceleration_or_force.z, _x.setPointRaw.yaw, _x.setPointRaw.yaw_rate, _x.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.setPointRaw is None:
        self.setPointRaw = mavros_msgs.msg.PositionTarget()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.setPointRaw.header.seq, _x.setPointRaw.header.stamp.secs, _x.setPointRaw.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.setPointRaw.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.setPointRaw.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.setPointRaw.coordinate_frame, _x.setPointRaw.type_mask, _x.setPointRaw.position.x, _x.setPointRaw.position.y, _x.setPointRaw.position.z, _x.setPointRaw.velocity.x, _x.setPointRaw.velocity.y, _x.setPointRaw.velocity.z, _x.setPointRaw.acceleration_or_force.x, _x.setPointRaw.acceleration_or_force.y, _x.setPointRaw.acceleration_or_force.z, _x.setPointRaw.yaw, _x.setPointRaw.yaw_rate, _x.success,) = _get_struct_BH9d2fB().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BH9d2fB = None
def _get_struct_BH9d2fB():
    global _struct_BH9d2fB
    if _struct_BH9d2fB is None:
        _struct_BH9d2fB = struct.Struct("<BH9d2fB")
    return _struct_BH9d2fB
class GenTrajOnline(object):
  _type          = 'offboard_control/GenTrajOnline'
  _md5sum = '1c8daf56fea4f669979846d8a40908f8'
  _request_class  = GenTrajOnlineRequest
  _response_class = GenTrajOnlineResponse
