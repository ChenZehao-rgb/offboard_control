// Generated by gencpp from file offboard_control/SetOffboardCtlTypeRequest.msg
// DO NOT EDIT!


#ifndef OFFBOARD_CONTROL_MESSAGE_SETOFFBOARDCTLTYPEREQUEST_H
#define OFFBOARD_CONTROL_MESSAGE_SETOFFBOARDCTLTYPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offboard_control
{
template <class ContainerAllocator>
struct SetOffboardCtlTypeRequest_
{
  typedef SetOffboardCtlTypeRequest_<ContainerAllocator> Type;

  SetOffboardCtlTypeRequest_()
    : offbCtlType(0)  {
    }
  SetOffboardCtlTypeRequest_(const ContainerAllocator& _alloc)
    : offbCtlType(0)  {
  (void)_alloc;
    }



   typedef int32_t _offbCtlType_type;
  _offbCtlType_type offbCtlType;





  typedef boost::shared_ptr< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetOffboardCtlTypeRequest_

typedef ::offboard_control::SetOffboardCtlTypeRequest_<std::allocator<void> > SetOffboardCtlTypeRequest;

typedef boost::shared_ptr< ::offboard_control::SetOffboardCtlTypeRequest > SetOffboardCtlTypeRequestPtr;
typedef boost::shared_ptr< ::offboard_control::SetOffboardCtlTypeRequest const> SetOffboardCtlTypeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator1> & lhs, const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.offbCtlType == rhs.offbCtlType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator1> & lhs, const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboard_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3d42780a828cad348444e814dd3f03f";
  }

  static const char* value(const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3d42780a828cad3ULL;
  static const uint64_t static_value2 = 0x48444e814dd3f03fULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard_control/SetOffboardCtlTypeRequest";
  }

  static const char* value(const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 offbCtlType\n"
;
  }

  static const char* value(const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offbCtlType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetOffboardCtlTypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard_control::SetOffboardCtlTypeRequest_<ContainerAllocator>& v)
  {
    s << indent << "offbCtlType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.offbCtlType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_CONTROL_MESSAGE_SETOFFBOARDCTLTYPEREQUEST_H
