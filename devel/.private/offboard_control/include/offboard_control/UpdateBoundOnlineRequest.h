// Generated by gencpp from file offboard_control/UpdateBoundOnlineRequest.msg
// DO NOT EDIT!


#ifndef OFFBOARD_CONTROL_MESSAGE_UPDATEBOUNDONLINEREQUEST_H
#define OFFBOARD_CONTROL_MESSAGE_UPDATEBOUNDONLINEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace offboard_control
{
template <class ContainerAllocator>
struct UpdateBoundOnlineRequest_
{
  typedef UpdateBoundOnlineRequest_<ContainerAllocator> Type;

  UpdateBoundOnlineRequest_()
    : velBound()
    , accBound()  {
    }
  UpdateBoundOnlineRequest_(const ContainerAllocator& _alloc)
    : velBound(_alloc)
    , accBound(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velBound_type;
  _velBound_type velBound;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accBound_type;
  _accBound_type accBound;





  typedef boost::shared_ptr< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateBoundOnlineRequest_

typedef ::offboard_control::UpdateBoundOnlineRequest_<std::allocator<void> > UpdateBoundOnlineRequest;

typedef boost::shared_ptr< ::offboard_control::UpdateBoundOnlineRequest > UpdateBoundOnlineRequestPtr;
typedef boost::shared_ptr< ::offboard_control::UpdateBoundOnlineRequest const> UpdateBoundOnlineRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator1> & lhs, const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator2> & rhs)
{
  return lhs.velBound == rhs.velBound &&
    lhs.accBound == rhs.accBound;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator1> & lhs, const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboard_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c55196be5ab9eb3efa8c6c0801e7ab77";
  }

  static const char* value(const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc55196be5ab9eb3eULL;
  static const uint64_t static_value2 = 0xfa8c6c0801e7ab77ULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard_control/UpdateBoundOnlineRequest";
  }

  static const char* value(const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 velBound\n"
"geometry_msgs/Vector3 accBound\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velBound);
      stream.next(m.accBound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateBoundOnlineRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard_control::UpdateBoundOnlineRequest_<ContainerAllocator>& v)
  {
    s << indent << "velBound: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velBound);
    s << indent << "accBound: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accBound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_CONTROL_MESSAGE_UPDATEBOUNDONLINEREQUEST_H
