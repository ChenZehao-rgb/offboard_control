// Generated by gencpp from file offboard_control/OffboardCtlType.msg
// DO NOT EDIT!


#ifndef OFFBOARD_CONTROL_MESSAGE_OFFBOARDCTLTYPE_H
#define OFFBOARD_CONTROL_MESSAGE_OFFBOARDCTLTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offboard_control
{
template <class ContainerAllocator>
struct OffboardCtlType_
{
  typedef OffboardCtlType_<ContainerAllocator> Type;

  OffboardCtlType_()
    : offb_ctrl_type(0)  {
    }
  OffboardCtlType_(const ContainerAllocator& _alloc)
    : offb_ctrl_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _offb_ctrl_type_type;
  _offb_ctrl_type_type offb_ctrl_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GOTO_SETPOINT_STEP)
  #undef GOTO_SETPOINT_STEP
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINT_CLOSED_LOOP)
  #undef GOTO_SETPOINT_CLOSED_LOOP
#endif
#if defined(_WIN32) && defined(GOTO_SETPOINTS_SERIES)
  #undef GOTO_SETPOINTS_SERIES
#endif

  enum {
    GOTO_SETPOINT_STEP = 0u,
    GOTO_SETPOINT_CLOSED_LOOP = 1u,
    GOTO_SETPOINTS_SERIES = 2u,
  };


  typedef boost::shared_ptr< ::offboard_control::OffboardCtlType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard_control::OffboardCtlType_<ContainerAllocator> const> ConstPtr;

}; // struct OffboardCtlType_

typedef ::offboard_control::OffboardCtlType_<std::allocator<void> > OffboardCtlType;

typedef boost::shared_ptr< ::offboard_control::OffboardCtlType > OffboardCtlTypePtr;
typedef boost::shared_ptr< ::offboard_control::OffboardCtlType const> OffboardCtlTypeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard_control::OffboardCtlType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard_control::OffboardCtlType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboard_control::OffboardCtlType_<ContainerAllocator1> & lhs, const ::offboard_control::OffboardCtlType_<ContainerAllocator2> & rhs)
{
  return lhs.offb_ctrl_type == rhs.offb_ctrl_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboard_control::OffboardCtlType_<ContainerAllocator1> & lhs, const ::offboard_control::OffboardCtlType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboard_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard_control::OffboardCtlType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::OffboardCtlType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::OffboardCtlType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "640ad7cdefca8d4153a8d8cdc9622cb2";
  }

  static const char* value(const ::offboard_control::OffboardCtlType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x640ad7cdefca8d41ULL;
  static const uint64_t static_value2 = 0x53a8d8cdc9622cb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard_control/OffboardCtlType";
  }

  static const char* value(const ::offboard_control::OffboardCtlType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 offb_ctrl_type\n"
"\n"
"uint8 GOTO_SETPOINT_STEP = 0\n"
"uint8 GOTO_SETPOINT_CLOSED_LOOP = 1\n"
"\n"
"uint8 GOTO_SETPOINTS_SERIES = 2\n"
;
  }

  static const char* value(const ::offboard_control::OffboardCtlType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offb_ctrl_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OffboardCtlType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard_control::OffboardCtlType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard_control::OffboardCtlType_<ContainerAllocator>& v)
  {
    s << indent << "offb_ctrl_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offb_ctrl_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_CONTROL_MESSAGE_OFFBOARDCTLTYPE_H
