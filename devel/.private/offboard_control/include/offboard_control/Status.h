// Generated by gencpp from file offboard_control/Status.msg
// DO NOT EDIT!


#ifndef OFFBOARD_CONTROL_MESSAGE_STATUS_H
#define OFFBOARD_CONTROL_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Quaternion.h>

namespace offboard_control
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : state()
    , uav2_position()
    , uav2_orientation()  {
    }
  Status_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , uav2_position(_alloc)
    , uav2_orientation(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _uav2_position_type;
  _uav2_position_type uav2_position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _uav2_orientation_type;
  _uav2_orientation_type uav2_orientation;





  typedef boost::shared_ptr< ::offboard_control::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboard_control::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::offboard_control::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::offboard_control::Status > StatusPtr;
typedef boost::shared_ptr< ::offboard_control::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboard_control::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboard_control::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboard_control::Status_<ContainerAllocator1> & lhs, const ::offboard_control::Status_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.uav2_position == rhs.uav2_position &&
    lhs.uav2_orientation == rhs.uav2_orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboard_control::Status_<ContainerAllocator1> & lhs, const ::offboard_control::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboard_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboard_control::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboard_control::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboard_control::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboard_control::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboard_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1da643e68400df1829ed9658c05293dc";
  }

  static const char* value(const ::offboard_control::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1da643e68400df18ULL;
  static const uint64_t static_value2 = 0x29ed9658c05293dcULL;
};

template<class ContainerAllocator>
struct DataType< ::offboard_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboard_control/Status";
  }

  static const char* value(const ::offboard_control::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboard_control::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state\n"
"geometry_msgs/Pose uav2_position\n"
"geometry_msgs/Quaternion uav2_orientation\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::offboard_control::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboard_control::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.uav2_position);
      stream.next(m.uav2_orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboard_control::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboard_control::Status_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
    s << indent << "uav2_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.uav2_position);
    s << indent << "uav2_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.uav2_orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARD_CONTROL_MESSAGE_STATUS_H
